/*
 * RealWorld Conduit API
 *
 * Conduit API documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using RealworldApi.Web.Attributes;
using RealworldApi.Web.Security;
using Microsoft.AspNetCore.Authorization;
using RealworldApi.Web.Models;
using RealworldWeb.Caller;
using Contracts.Communicator.Response;
using Contracts.Validators;
using Contracts.Communicator.Request;

namespace RealworldApi.Web.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentsApiController : ControllerBase
    {
        private readonly ITokenUtils tokenizer;
        private readonly ICommentCaller caller;

        public CommentsApiController(ITokenUtils tokenizer, ICommentCaller caller)
        {
            this.tokenizer = tokenizer;
            this.caller = caller;
        }

        private Comment ConvertComment(CommentGetResponseContract contract)
        {
            Comment comment = new Comment();
            comment.Id = contract.Id;
            comment.Body = contract.Body;
            comment.CreatedAt = contract.CreatedAt;
            comment.UpdatedAt = contract.UpdatedAt;
            comment.Author = new Profile();
            comment.Author.Bio = contract.Author.Bio;
            comment.Author.Following = contract.Author.Following;
            comment.Author.Image = contract.Author.Image;
            comment.Author.Username = contract.Author.Username;
            return comment;
        }
        /// <summary>
        /// Create a comment for an article
        /// </summary>
        /// <remarks>Create a comment for an article. Auth is required</remarks>
        /// <param name="body">Comment you want to create</param>
        /// <param name="slug">Slug of the article that you want to create a comment for</param>
        /// <response code="200">Single comment</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/articles/{slug}/comments")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateArticleComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "Single comment")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> CreateArticleComment([FromBody]CreateCommentApiBody body, [FromRoute][Required]string slug)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication must have failed");
                return StatusCode(401);
            }
            CommentCreateContract contract = new CommentCreateContract();
            contract.ArticleSlug = slug;
            contract.AuthorId = userid.Value;
            contract.Body = body.Comment.Body;
            var validator = new CommentCreateValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("Web.CreateComment validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }

            var response = await caller.CreateComment(contract);
            if (response == null)
            {
                Console.WriteLine("Call to CreateComment failed");
                return StatusCode(422, default(GenericErrorModel));
            }

            InlineResponse2004 resp = new InlineResponse2004();
            resp.Comment = ConvertComment(response);
            return StatusCode(200, resp);
            
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }

        /// <summary>
        /// Delete a comment for an article
        /// </summary>
        /// <remarks>Delete a comment for an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article that you want to delete a comment for</param>
        /// <param name="id">ID of the comment you want to delete</param>
        /// <response code="200">No content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/articles/{slug}/comments/{id}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteArticleComment")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> DeleteArticleComment([FromRoute][Required]string slug, [FromRoute][Required]int? commentid)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication must have failed");
                return StatusCode(401);
            }
            CommentDeleteContract contract = new CommentDeleteContract();
            contract.Slug = slug;
            contract.AuthorId = userid.Value;
            contract.CommentId = commentid;
            var validator = new CommentDeleteValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("Web.DeleteComment validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }
            var result = await caller.DeleteComment(contract);
            if (string.IsNullOrEmpty(result))
            {
                Console.WriteLine("Call to DeleteComment failed");
                return StatusCode(422, default(GenericErrorModel));
            }
            return StatusCode(200);

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }

        /// <summary>
        /// Get comments for an article
        /// </summary>
        /// <remarks>Get the comments for an article. Auth is optional</remarks>
        /// <param name="slug">Slug of the article that you want to get comments for</param>
        /// <response code="200">Multiple comments</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/{slug}/comments")]
        [ValidateModelState]
        [SwaggerOperation("GetArticleComments")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "Multiple comments")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticleComments([FromRoute][Required]string slug)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication is optional");
            }
            CommentGetContract contract = new CommentGetContract();
            contract.Slug = slug;
            contract.FollowerId = userid;
            var validator = new CommentGetManyValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("Web.GetComment validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }

            var response = await caller.GetAllComments(slug, userid);
            if (response == null)
            {
                Console.WriteLine("Call to GetAllComments failed");
                return StatusCode(422, default(GenericErrorModel));
            }
            InlineResponse2003 resp = new InlineResponse2003();
            resp.Comments = new List<Comment>();
            foreach (var comment in response)
            {
                resp.Comments.Add(ConvertComment(comment));
            }
            return StatusCode(200, resp);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }
    }
}
