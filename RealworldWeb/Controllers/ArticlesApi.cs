/*
 * RealWorld Conduit API
 *
 * Conduit API documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using RealworldApi.Web.Security;
using RealworldApi.Web.Models;
using RealworldApi.Web.Attributes;
using System.Text.Json;
using RealworldWeb.Caller;
using Contracts.Communicator.Request;
using Contracts.Validators;
using System.Security.Claims;
using Contracts.Communicator.Response;

namespace RealworldApi.Web.Controllers
{


    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArticlesApiController : ControllerBase
    {
        private readonly ITokenUtils tokenizer;
        private readonly IArticleCaller caller;

        public ArticlesApiController(ITokenUtils tokenizer, IArticleCaller caller)
        {
            this.tokenizer = tokenizer;
            this.caller = caller;
        }

        public static Article ArticleContractToArticleResponse(ArticleGetResponseContract body) // TODO make this a helper
        {
            Article response = new Article();
            response.Slug = body.Slug;
            response.Title = body.Title;
            response.Body = body.Body;
            response.Description = body.Description;
            response.Favorited = body.Favorited;
            response.UpdatedAt = body.UpdatedAt;
            response.CreatedAt = body.CreatedAt;
            response.TagList = body.Tags;
            response.Author = new Profile();
            response.Author.Username = body.Author.Username;
            response.Author.Bio = body.Author.Bio;
            response.Author.Image = body.Author.Image;
            response.Author.Following = body.Author.Following;
            return response;
        }

        /// <summary>
        /// Create an article
        /// </summary>
        /// <remarks>Create an article. Auth is required</remarks>
        /// <param name="body">Article to create</param>
        /// <response code="201">Single article</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPost]
        [Route("/api/articles")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateArticle")]
        [SwaggerResponse(statusCode: 201, type: typeof(InlineResponse201), description: "Single article")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> CreateArticle([FromBody]NewArticle body)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication must have failed");
                return StatusCode(401);
            }
            var article = new ArticleCreateContract();
            article.Title = body.Title;
            article.Body = body.Body;
            article.AuthorId = (int)userid;

            var validator = new CreateArticleValidator(article);
            if (!validator.Validate())
            {
                return StatusCode(422, default(GenericErrorModel));
            }
            var aresp = await caller.CreateArticle(article);
            if (aresp == null)
            {
                return StatusCode(422, default(GenericErrorModel));
            }
            InlineResponse201 resp = new InlineResponse201();
            resp.Article = ArticleContractToArticleResponse(aresp);
            return StatusCode(201, resp);
        }

        /// <summary>
        /// Delete an article
        /// </summary>
        /// <remarks>Delete an article. Auth is required</remarks>
        /// <param name="slug">Slug of the article to delete</param>
        /// <response code="200">No content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpDelete]
        [Route("/api/articles/{slug}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteArticle")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> DeleteArticle([FromRoute][Required]string slug)
        { 
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication must have failed");
                return StatusCode(401);
            }
            ArticleDeleteContract contract = new ArticleDeleteContract();
            contract.Slug = slug;
            contract.AuthorId = userid.Value;
            ArticleDeleteValidator validator = new ArticleDeleteValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("WebHost.DeleteArticle validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }
            var resp = await caller.DeleteArticle(contract);
            if (!resp)
            {
                return StatusCode(422, default(GenericErrorModel));
            }
            return StatusCode(200);

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }

        /// <summary>
        /// Get an article
        /// </summary>
        /// <remarks>Get an article. Auth not required</remarks>
        /// <param name="slug">Slug of the article to get</param>
        /// <response code="200">Single article</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/{slug}")]
        [ValidateModelState]
        [SwaggerOperation("GetArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse201), description: "Single article")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticle([FromRoute][Required]string slug)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication is optional");
            }
            // TODO validation 
            ArticleGetResponseContract contract = await caller.GetArticle(slug, userid);
            if (contract == null)
            {
                return StatusCode(422, default(GenericErrorModel));
            }
            InlineResponse201 resp = new InlineResponse201();
            resp.Article = new Article();
            resp.Article = ArticleContractToArticleResponse(contract);
            return StatusCode(201, resp);
        }

        /// <summary>
        /// Get recent articles globally
        /// </summary>
        /// <remarks>Get most recent articles globally. Use query parameters to filter results. Auth is optional</remarks>
        /// <param name="tag">Filter by tag</param>
        /// <param name="author">Filter by author (username)</param>
        /// <param name="favorited">Filter by favorites of a user (username)</param>
        /// <param name="offset">The number of items to skip before starting to collect the result set.</param>
        /// <param name="limit">The numbers of items to return.</param>
        /// <response code="200">Multiple articles</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles")]
        [ValidateModelState]
        [SwaggerOperation("GetArticles")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Multiple articles")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticles([FromQuery]string tag, [FromQuery]string author, [FromQuery]string favorited, [FromQuery]int? offset, [FromQuery]int? limit)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication is optional");
            }
            ArticleGetContract contract = new ArticleGetContract();
            if (!string.IsNullOrEmpty(tag))
            {
                contract.Tags = new List<string> { tag };
            }
            contract.Authorname = author;
            contract.FollowedByName = favorited; // Priority? 
            contract.Offset = offset; // TODO defaults? 
            contract.Limit = limit; // TODO defaults?
            contract.FollowedById = userid;
            var validator = new ArticleGetMultipleValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("WebHost.GetArticles validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }
            var resps = await caller.GetArticlesFiltered(contract);

            if (resps == null)
            {
                Console.WriteLine("Response is null");
                return StatusCode(422, default(GenericErrorModel));
            }

            InlineResponse2002 articlesResponse = new InlineResponse2002();

            foreach (var r in resps)
            {
                articlesResponse.Articles.Add(ArticleContractToArticleResponse(r));
            }
            articlesResponse.ArticlesCount = articlesResponse.Articles.Count;
            return StatusCode(200, articlesResponse);
            
            //caller.GetArticlesByFeed
            //caller.GetArticlesFiltered


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }

        /// <summary>
        /// Get recent articles from users you follow
        /// </summary>
        /// <remarks>Get most recent articles from users you follow. Use query parameters to limit. Auth is required</remarks>
        /// <param name="offset">The number of items to skip before starting to collect the result set.</param>
        /// <param name="limit">The numbers of items to return.</param>
        /// <response code="200">Multiple articles</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpGet]
        [Route("/api/articles/feed")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetArticlesFeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Multiple articles")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> GetArticlesFeed([FromQuery]int? offset, [FromQuery]int? limit)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication is optional");
            }
            var contract = new ArticleGetContract { FollowedById = userid, Offset = offset, Limit = limit };
            var validator = new ArticleGetMultipleValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("WebHost.GetArticles validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }
            var resps = await caller.GetArticlesByFeed(contract);
            InlineResponse2002 articlesResponse = new InlineResponse2002();

            foreach (var r in resps)
            {
                articlesResponse.Articles.Add(ArticleContractToArticleResponse(r));
            }
            articlesResponse.ArticlesCount = articlesResponse.Articles.Count;
            return StatusCode(200, articlesResponse);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }

        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>Update an article. Auth is required</remarks>
        /// <param name="body">Article to update</param>
        /// <param name="slug">Slug of the article to update</param>
        /// <response code="200">Single article</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="422">Unexpected error</response>
        [HttpPut]
        [Route("/api/articles/{slug}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateArticle")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse201), description: "Single article")]
        [SwaggerResponse(statusCode: 422, type: typeof(GenericErrorModel), description: "Unexpected error")]
        public virtual async Task<IActionResult> UpdateArticle([FromBody]Article body, [FromRoute][Required]string slug)
        {
            int? userid = tokenizer.GetIdFromAuthedUser(User);
            if (userid == null)
            {
                Console.WriteLine("Authentication must have failed");
                return StatusCode(401);
            }
            ArticleUpdateContract contract = new ArticleUpdateContract();
            contract.Slug = slug;
            contract.Title = body.Title;
            contract.Body = body.Body;
            contract.Description = body.Description;
            contract.Tags = body.TagList;
            contract.AuthorId = userid.Value;
            var validator = new ArticleUpdateValidator(contract);
            if (!validator.Validate())
            {
                Console.WriteLine("WebHost.UpdateArticle validation failure: " + validator.GetError().ToString());
                return StatusCode(422, default(GenericErrorModel));
            }
            ArticleGetResponseContract r = await caller.UpdateArticle(contract);
            if (r == null)
            {
                Console.WriteLine("UpdateArticle failed");
                return StatusCode(422, default(GenericErrorModel));
            }
            InlineResponse201 resp = new InlineResponse201();
            resp.Article = ArticleContractToArticleResponse(r);
            return StatusCode(200, resp);

            
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse201));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(GenericErrorModel));
        }
    }
}
